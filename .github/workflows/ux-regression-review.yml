name: UX Regression Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  pull-requests: write
  contents: read

jobs:
  test-and-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install
        
      - name: Run tests and capture results
        id: test-run
        run: |
          # Run tests and save output, don't fail on test failures
          npm test -- --json --outputFile=test-results.json || true
          
          # Check if there were any failures and set output
          TEST_STATUS=$(cat test-results.json | jq -r '.success')
          echo "test-status=$TEST_STATUS" >> $GITHUB_OUTPUT
          
          # Save test results for Devin to analyze
          TEST_OUTPUT=$(cat test-results.json | jq -c .)
          echo "test-output=$TEST_OUTPUT" >> $GITHUB_OUTPUT

      - name: Create Devin Review Session
        id: devin-review
        env:
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
          TEST_STATUS: ${{ steps.test-run.outputs.test-status }}
          TEST_OUTPUT: ${{ steps.test-run.outputs.test-output }}
          
          REVIEW_PROMPT: |
            You are UX Regression Reviewer Devin. Your task is to analyze test results and return a JSON response.
            
            Based on the test results, return EXACTLY one of these two JSON formats with no other text:

            For no regressions:
            {"hasRegressions":false,"comment":"# UI Review Summary âœ…\n\n## Test Results\n- All snapshot tests passing\n- Component styling consistent with patterns\n- No visual regressions detected\n\n## Analyzed Components\n[List components you checked]\n\nGreat work maintaining UI consistency!"}

            For regressions found:
            {"hasRegressions":true,"filePath":"src/components/logs/LogEntry.tsx","line":50,"suggestion":"<div className=\\"mt-2 p-2 bg-red-50 rounded text-sm overflow-x-auto font-mono\\">","explanation":"Restoring error background styling that matches our logging component pattern."}

            Test Results:
            Status: ${{ steps.test-run.outputs.test-status }}
            Details: ${{ steps.test-run.outputs.test-output }}

        run: |
          # Make the API call to Devin
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $DEVIN_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"prompt\": \"$REVIEW_PROMPT\"}" \
            "https://api.devin.ai/v1/sessions")

          # Debug: Print the raw response
          echo "Raw Devin Response:"
          echo "$RESPONSE"

          # Extract message from response
          MESSAGE=$(echo "$RESPONSE" | jq -r '.message')
          
          # Debug: Print the message
          echo "Extracted Message:"
          echo "$MESSAGE"

          # Set the analysis output
          echo "analysis=${MESSAGE}" >> $GITHUB_ENV

      - name: Process Devin's Review
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const rawAnalysis = process.env.analysis;
              console.log('Raw analysis:', rawAnalysis);
              
              if (!rawAnalysis) {
                throw new Error('No analysis received from Devin');
              }
              
              const analysis = JSON.parse(rawAnalysis);
              console.log('Parsed analysis:', analysis);
              
              if (!analysis || typeof analysis.hasRegressions !== 'boolean') {
                throw new Error('Invalid analysis format');
              }
              
              if (analysis.hasRegressions) {
                // Create a suggestion comment for the regression
                await github.rest.pulls.createReviewComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.payload.pull_request.number,
                  commit_id: context.payload.pull_request.head.sha,
                  path: analysis.filePath,
                  line: analysis.line,
                  body: `\`\`\`suggestion\n${analysis.suggestion}\n\`\`\`\n${analysis.explanation}`
                });
              } else {
                // Create a general review comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: analysis.comment
                });
              }
            } catch (error) {
              console.error('Error processing Devin analysis:', error);
              
              // Post error as PR comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `Error in UX review: ${error.message}\n\nPlease check the workflow logs for details.`
              });
              
              throw error;
            }