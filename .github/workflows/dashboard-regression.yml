name: Dashboard Regression Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      # Only trigger on dashboard-related files
      - 'src/components/LogDashboard.tsx'
      - 'src/components/logs/**'
      - 'src/utils/logUtils.ts'
      - 'src/hooks/useGameLogs.ts'
      - 'tests/components/LogDashboard.test.tsx'
      - 'tests/logs/**'
      - 'tests/utils/logUtils.test.ts'

permissions:
  contents: read
  pull-requests: read
  issues: read

jobs:
  check-dashboard-regression:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Run Dashboard Tests
        id: test-run
        run: |
          npm install
          # Run dashboard-related tests with JSON reporter
          npm test -- --testPathPattern='(LogDashboard|LogEntry|ErrorDistribution|logUtils)' --json --outputFile=dashboard-test-results.json
        continue-on-error: true

      - name: Get Test Results
        id: test-results
        if: steps.test-run.outcome == 'failure'
        run: |
          # Read and format test results for Devin
          TEST_RESULTS=$(cat dashboard-test-results.json | jq -c . | jq -sR)

      - name: Create Devin Review Session
        if: steps.test-run.outcome == 'failure'
        id: devin-review
        env:
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
          TEST_RESULTS: ${{ steps.test-results.outputs.results }}
          
          REVIEW_PROMPT: |
            You are analyzing potential regressions in the game-logs dashboard. Your tasks:

            1. Review the test failures in the dashboard test results:
               - Analyze failed assertions and snapshots
               - Compare expected vs actual outputs
               - Identify regression patterns

            2. Focus Areas for Dashboard Regressions:
               a. Time Display Issues:
                  - UTC vs local time display issues
                  - Timestamp formatting problems
                  - Timezone handling bugs
               
               b. Log Entry Display:
                  - Log entry formatting regressions
                  - Severity badge display issues
                  - Filtering functionality problems
               
               c. Error Distribution:
                  - Error counting logic regressions
                  - Chart data processing issues
                  - Category grouping problems

            3. For each identified regression:
               - Locate the exact line causing the issue
               - Propose a fix as a GitHub suggestion comment
               - Explain the regression's impact on dashboard functionality

            Rules and Guidelines:
            1. NEVER make any commits or pushes - only review and comment
            2. One suggestion per regression issue
            3. Use inline feedback with specific line references
            4. Include before/after code snippets in markdown
            5. Consider timezone and data processing implications
            6. Focus only on dashboard-related regressions
            7. Verify suggestions maintain existing functionality
            8. Check that the issue wasn't addressed in previous reviews
            9. Consolidate similar issues into one comment
            10. Maximum of three comments per review
            
            Test Results to analyze:
            ${{ steps.test-results.outputs.results }}

        run: |
          # Convert multiline string to JSON-safe format
          ESCAPED_PROMPT=$(echo "$REVIEW_PROMPT" | jq -Rs .)

          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $DEVIN_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"prompt\": $ESCAPED_PROMPT,
              \"test_results\": $TEST_RESULTS,
              \"files\": {
                \"dashboard\": \"./src/components/LogDashboard.tsx\",
                \"log-entry\": \"./src/components/logs/LogEntry.tsx\",
                \"log-utils\": \"./src/utils/logUtils.ts\"
              }
            }" \
            "https://api.devin.ai/v1/sessions")

          # Check for errors in the response
          ERROR_MSG=$(echo "$RESPONSE" | jq -r '.error')
          if [ "$ERROR_MSG" != "null" ]; then
            echo "Error creating Devin session: $ERROR_MSG"
            exit 1
          fi

          SESSION_ID=$(echo "$RESPONSE" | jq -r '.session_id')
          SESSION_URL=$(echo "$RESPONSE" | jq -r '.url')

          if [ -z "$SESSION_ID" ] || [ -z "$SESSION_URL" ]; then
            echo "Error: Devin session details are missing from the response."
            exit 1
          fi

          echo "session-id=$SESSION_ID" >> $GITHUB_OUTPUT
          echo "session-url=$SESSION_URL" >> $GITHUB_OUTPUT
          echo "Devin session created successfully: $RESPONSE"