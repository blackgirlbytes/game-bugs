name: Dashboard Regression Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      # Only trigger on dashboard-related files
      - 'src/components/LogDashboard.tsx'
      - 'src/components/logs/**'
      - 'src/utils/logUtils.ts'
      - 'src/hooks/useGameLogs.ts'
      - 'tests/components/LogDashboard.test.tsx'
      - 'tests/logs/**'
      - 'tests/utils/logUtils.test.ts'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check-dashboard-regression:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Run Dashboard Tests
        id: test-run
        run: |
          npm install
          # Run dashboard-related tests with JSON reporter
          npm test -- --testPathPattern='(LogDashboard|LogEntry|ErrorDistribution|logUtils)' --json --outputFile=dashboard-test-results.json || true
          echo "Test run completed"

      - name: Process Test Results
        id: test-results
        run: |
          if [ -f dashboard-test-results.json ]; then
            # Read test results and escape special characters
            TEST_RESULTS=$(cat dashboard-test-results.json | jq -c . | sed 's/"/\\"/g')
            echo "results<<EOF" >> $GITHUB_OUTPUT
            echo "$TEST_RESULTS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "has_results=true" >> $GITHUB_OUTPUT
          else
            echo "No test results file found"
            echo "has_results=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Devin Review Session
        if: steps.test-results.outputs.has_results == 'true'
        id: devin-review
        env:
          DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          # Get test results from previous step
          TEST_RESULTS='${{ steps.test-results.outputs.results }}'

          # Create the prompt
          PROMPT=$(cat <<'EOT'
          You are Dashboard Regression Analyzer Devin. Your task is to analyze test failures in the game-logs dashboard and provide detailed feedback.

          1. Review the test failures in the dashboard test results:
             - Analyze failed assertions and snapshots
             - Compare expected vs actual outputs
             - Identify regression patterns
          2. Check the PR changes that caused these test failures
          3. Read the PR discussion to see what previous comments have been made
          4. Analyze the regression impact, focusing on:
             a. Time Display Issues:
                - UTC vs local time display issues
                - Timestamp formatting problems
                - Timezone handling bugs
             b. Log Entry Display:
                - Log entry formatting regressions
                - Severity badge display issues
                - Filtering functionality problems
             c. Error Distribution:
                - Error counting logic regressions
                - Chart data processing issues
                - Category grouping problems

          Rules:
          1. NEVER make commits - only review and comment
          2. One suggestion per regression issue
          3. Use inline feedback with line references
          4. Include code snippets in markdown
          5. Consider timezone implications
          6. Focus on dashboard regressions
          7. Maximum three comments per review
          8. Never ask for confirmation

          Test Results to analyze:
          ${TEST_RESULTS}
          EOT
          )

          # Escape the prompt for JSON
          ESCAPED_PROMPT=$(echo "$PROMPT" | jq -R -s '.')

          # Debug output
          echo "Sending request to Devin API with prompt length: ${#PROMPT}"
          echo "First 500 chars of escaped prompt:"
          echo "$ESCAPED_PROMPT" | head -c 500

          # Make the API call with minimal JSON
          RESPONSE=$(curl -v -s -X POST \
            -H "Authorization: Bearer $DEVIN_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"prompt\": $ESCAPED_PROMPT}" \
            "https://api.devin.ai/v1/sessions")

          echo "Full Devin API Response:"
          echo "$RESPONSE"

          # Extract and validate session details
          SESSION_ID=$(echo "$RESPONSE" | jq -r '.session_id // empty')
          if [ -z "$SESSION_ID" ] || [ "$SESSION_ID" = "null" ]; then
            echo "Error: Failed to get valid session ID from response"
            echo "Response was: $RESPONSE"
            exit 1
          fi

          echo "session-id=$SESSION_ID" >> $GITHUB_OUTPUT